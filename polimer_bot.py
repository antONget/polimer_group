import logging
from aiogram import Bot,types,Dispatcher,F,Router
from aiogram.filters import Command,StateFilter,or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import  default_state,State,StatesGroup
from aiogram.types import FSInputFile


import time
import sqlite3
from collections import OrderedDict
import os

from config_data.config import Config,load_config
from keyboards import admin_keyboards,user_keyboards
from database import requests_user,request_admin

config:Config = load_config()

admin_id = config.tg_bot.admin_ids.split(',')
manager_id = config.tg_bot.manager_ids.split(',')

photo_name = ''
my_dict = {"–ï–º_–Ω–∞–∑":['TOVARI.sql','ground_tanks'],
           "–ï–º_–ø–æ–¥–∑":['TOVARI.sql','underground_tanks'],
           "–î–∞—á–∞":['TOVARI.sql','for_village'],
           "–ö–æ–º–ø–ª":['TOVARI.sql','accessories'],
           "–ú—É—Å–æ—Ä":['TOVARI.sql','for_trash'],
           "–ö–æ—Ä–æ–±":['TOVARI.sql','Boxes'],
           "–ê–∑—Å":['TOVARI.sql','azs'],
           "–ó–∞–ø_–∞–∑—Å":['TOVARI.sql','azs_parts']
           }

logging.basicConfig(level=logging.INFO,
                    # filename="py_log.log",
                    # filemode='w',
                    format='%(filename)s:%(lineno)d #%(levelname)-8s '
                           '[%(asctime)s] - %(name)s - %(message)s')

class FSMFillForm(StatesGroup):
    fill_fio = State()
    fill_phone_number = State()
    fill_city = State()
    change_fio = State()
    change_city = State()
    change_phone_number = State()


    change_photo_admin_name = State()
    change_photo_admin_photo = State()
    add_photo_admin_name = State()
    add_photo_admin_photo = State()


bot = Bot(token=config.tg_bot.token)
dp = Dispatcher(bot=bot)
# dp.include_router(error.router)

@dp.message(Command('start'),StateFilter(default_state))
async def start (message: types.Message,state:FSMContext):
    user_id = message.from_user.id
    logging.info('start')

    requests_user.create_tables_user(user_id)

    if str(message.from_user.id) in admin_id:
        await message.answer('–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
        await main_buttons_admin(message)
    else:
        user_id = message.from_user.id

        data = requests_user.proverka(user_id)

        if data:
            name = message.from_user.first_name
            await message.answer(f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å {name}, —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ.')
            await main_buttons_user(message)

        else:

            await message.answer('–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ. '
                                         '–ö–æ–º–ø–∞–Ω–∏—è ¬´–ü–æ–ª–∏–º–µ—Ä-–ì—Ä—É–ø–ø¬ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∏ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –µ–º–∫–æ—Å—Ç–∏ –¥–ª—è –≤–æ–¥—ã –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ, '
                                         '–∫–æ—Ç–æ—Ä—ã–µ, –∫–∞–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∞, –ø–æ–ª—å–∑—É—é—Ç—Å—è –±–æ–ª—å—à–æ–π –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å—é –±–ª–∞–≥–æ–¥–∞—Ä—è –æ—á–µ–Ω—å '
                                         '–≤—ã—Å–æ–∫–æ–º—É –∫–∞—á–µ—Å—Ç–≤—É –∏ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –¢–∞—Ä–∞ –∏–∑ –ø–ª–∞—Å—Ç–∏–∫–∞ —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏'
                                         ' –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∏—Ç—å–µ–≤–æ–π –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≤–æ–¥—ã –≤–æ –º–Ω–æ–≥–∏—Ö –æ—Ç—Ä–∞—Å–ª—è—Ö.')
            time.sleep(4)
            await  message.answer('–°–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –º—ã –º–æ–∂–µ–º –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: "–§–∞–º–∏–ª–∏—è,–ò–º—è,–û—Ç—á–µ—Å—Ç–≤–æ"')
            await state.set_state(FSMFillForm.fill_fio)

@dp.message(Command('photo'))
async def rechange_photo_for_new_bot(message: types.Message):
    logging.info('rechange_photo_for_new_bot')

    photo_list = request_admin.rechange_photo_id_for_new_bot()

    conn = sqlite3.connect('database/IMAGES_IDS.sql')
    cur = conn.cursor()
    for photo_name in photo_list:
        time.sleep(0.5)
        if str(photo_name[0]) == 'None':
            continue
        else:
            photo = FSInputFile(f'img/{photo_name[0]}')
            sent_photo = await bot.send_photo(chat_id=message.chat.id, photo=photo)
            photo_id = sent_photo.photo[-1].file_id

            cur.execute('INSERT INTO image_id (name,id) VALUES (?,?)', (str(photo_name[0]), photo_id))
            conn.commit()

    photo = FSInputFile('–Ω–µ—Ç_—Ñ–æ—Ç–æ.jpg')
    sent_photo = await bot.send_photo(chat_id=message.chat.id, photo=photo)
    photo_id = sent_photo.photo[-1].file_id
    cur.execute('INSERT INTO image_id (name,id) VALUES (?,?)', (str('–Ω–µ—Ç_—Ñ–æ—Ç–æ.jpg'), photo_id))
    conn.commit()

    cur.close()
    conn.close()

    await message.answer('–≥–æ—Ç–æ–≤–æ')

#–ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø

#–ü–û–õ–£–ß–ï–ù–ò–ï –§–ò–û
@dp.message(StateFilter(FSMFillForm.fill_fio))
async def get_fio(message: types.Message,state:FSMContext):
    logging.info('get_fio')
    fio = message.text
    id = message.from_user.id
    try:
        requests_user.insert_fio(id,fio)
        await message.answer('–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?')
        await state.set_state(FSMFillForm.fill_city)
    except Exception as e:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(FSMFillForm.fill_fio)

#–ü–û–õ–£–ß–ï–ù–ò–ï –ì–û–†–û–î–ê
@dp.message(StateFilter(FSMFillForm.fill_city))
async def get_city (message: types.Message,state:FSMContext):
    logging.info('get_city')
    markup = user_keyboards.send_phone_number()

    city = message.text
    id = message.from_user.id

    requests_user.inser_city(id,city)

    await message.answer('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è ‚òéÔ∏è" —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–π —Ä—è–¥–æ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üëá',reply_markup=markup)
    await state.set_state(FSMFillForm.fill_phone_number)

#–ü–û–õ–£–ß–ï–ù–ò–ï –ù–û–ú–ï–†–ê –¢–ï–õ–ï–§–û–ù–ê –ò –ï–ì–û –ü–†–û–í–ï–†–ö–ê
@dp.message(StateFilter(FSMFillForm.fill_phone_number))
async def get_phone_numder(message: types.Message,state:FSMContext):
    logging.info('get_phone_number')
    id = message.from_user.id
    try:
        phone_number = str(message.contact.phone_number)
        if requests_user.get_phone_number(id,phone_number):
            await message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
            await state.clear()
            await main_buttons_user(message)

        else:
            await message.answer('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞,–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–æ–¥ –≤—Ä—É—á—É–Ω—é')
            await state.set_state(FSMFillForm.fill_phone_number)
    except Exception as e:
        phone_number = str(message.text)
        if requests_user.get_phone_number(id, phone_number):
            await message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
            await state.clear()
            await main_buttons_user(message)

        else:
            await message.answer('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞,–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–æ–¥ –≤—Ä—É—á—É–Ω—é')
            await state.set_state(FSMFillForm.fill_phone_number)

@dp.message(F.text == '123132')
async def main_buttons_admin(message: types.Message):
    logging.info('main_buttons_admin')
    request_admin.create_tables()
    markup = admin_keyboards.create_keyboard_admin()
    await message.answer('–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º,–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',reply_markup=markup)

@dp.message(or_f((F.text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª'),(F.text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é'),(F.text == '–û–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é')))
async def main_admin_photo(message: types.Message,state:FSMContext):
    logging.info('main_admin_photo')
    if message.text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≤ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã')
        await state.set_state(FSMFillForm.add_photo_admin_name)
    if message.text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª':
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª')
    if message.text == '–û–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å (–í–≤–æ–¥–∏—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã')
        await state.set_state(FSMFillForm.change_photo_admin_name)


@dp.message(F.document)
async def get_file(message: types.Message):
    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ, —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É –º–∏–Ω—É—Ç')
    logging.info('get_file')

    file_id = message.document.file_id
    file_name = message.document.file_name

    file = await bot.get_file(file_id)

    await bot.download_file(file.file_path,f'{file_name}')

    request_admin.process_excel_file(file_name)

    os.remove(file_name)

    await message.answer('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω')

@dp.message(StateFilter(FSMFillForm.change_photo_admin_name))
async def re_get_photo_name(message: types.Message,state:FSMContext):
    logging.info('re_get_photo_name')
    photo_name = message.text
    names = request_admin.get_all_photo_name()
    for name in names:
        if str(name[0]) == str(photo_name):
            await state.set_state(FSMFillForm.change_photo_admin_photo)
            break
    else:
        await message.answer('–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ,–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.clear()

@dp.message(StateFilter(FSMFillForm.change_photo_admin_photo))
async def re_get_photo(message: types.Message,state:FSMContext):
    logging.info('re_get_photo')
    photo_id = message.photo[-1].file_id

    request_admin.rechange_photo_id(photo_name,photo_id)

    await message.answer('–§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')
    await state.clear()


@dp.message(StateFilter(FSMFillForm.add_photo_admin_name))
async def get_photo_name(message: types.Message,state:FSMContext):
    logging.info('get_photo_name')
    global photo_name
    photo_name = message.text
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é')
    await state.set_state(FSMFillForm.add_photo_admin_photo)

@dp.message(StateFilter(FSMFillForm.add_photo_admin_photo))
async def get_photo(message: types.Message,state:FSMContext):
    logging.info('get_photo')
    file_id = message.photo[-1].file_id
    print(file_id)

    request_admin.get_photo_to_sqlite(f'{photo_name}.jpg',file_id)

    await message.answer('–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
    await state.clear()

@dp.message(F.text == '–ù–∞–∑–∞–¥')
async def main_buttons_user (message: types.Message):
    logging.info('main_buttons_user')
    markup = user_keyboards.create_main_buttons_user()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª,–∫–Ω–æ–ø–∫–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã —Ä—è–¥–æ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üëá',reply_markup=markup)


@dp.message(or_f((F.text == '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§') , (F.text == '–ù–∞–∑–∞–¥') , (F.text == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑') ,(F.text == '–ö–æ—Ä–∑–∏–Ω–∞ üõí') , (F.text == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üßë‚Äçüíª') , (F.text == '–û –Ω–∞—Å üìå') , (F.text == '–ö–∞—Ç–∞–ª–æ–≥ üõç')))
async def main_user(message: types.Message):
    logging.info('main_user')
    id = message.from_user.id
    if message.text == '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§':

        markup = user_keyboards.kabinet_buttons(id)

        data = requests_user.get_user_info(id)

        name = data[0][1]
        lastname = data[0][2]
        patronymik = data[0][3]
        city = data[0][4]
        phone_numder = data[0][5]

        sent_message =  await message.answer(f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: \n'
                                         f'–ò–º—è: {name} \n'
                                         f'–§–∞–º–∏–ª–∏—è: {lastname} \n'
                                         f'–û—Ç—á–µ—Å—Ç–≤–æ: {patronymik} \n'
                                         f'–ì–æ—Ä–æ–¥: {city} \n'
                                         f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_numder}',reply_markup=markup)

        message_id = sent_message.message_id
        requests_user.update_name_razdel(message_id,id)

    if message.text == '–ù–∞–∑–∞–¥':
        await main_buttons_user(message)

    if message.text == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
        data = requests_user.get_corzina_data(id)

        corzina = list(OrderedDict.fromkeys(data))

        final_cost = 0

        Zakaz = '\n'

        for tovar in corzina:
            cost = int(tovar[0].split('–¶–µ–Ω–∞:')[-1][:-2])
            cnt = data.count(tovar)

            final_cost+=(cost*cnt)



            tovar_str = f'{tovar[0]}\n–ö–æ–ª-–≤–ª: {cnt}—à—Ç \n–¶–µ–Ω–∞ –∑–∞ {cnt}—à—Ç - {cnt*cost}\n\n\n'
            Zakaz+=tovar_str

        Zakaz+= f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {final_cost} –†'

        await message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º–º –≤–∞—Å –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞,–≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è')

        zakaz_id = requests_user.indert_zakaz_into_table(id,Zakaz)

        requests_user.clear_coezina(id)

        for manager in manager_id:
            print(manager)
            await bot.send_message(manager,f'–ö–ª–∏–µ–Ω—Ç: tg://user?id={id} \n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {zakaz_id} \n\n{Zakaz}')

        requests_user.clear_coezina(id)

    if message.text == '–ö–æ—Ä–∑–∏–Ω–∞ üõí':
        markup_main = user_keyboards.corzina_buttons()

        data = requests_user.get_corzina_data(id)

        if data == []:
            await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')

        else:

            await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:',reply_markup=markup_main)

            corzina = list(OrderedDict.fromkeys(data))

            for tovar in corzina:
                try:
                    cost = int(tovar[0].split('–¶–µ–Ω–∞:')[-1][:-2])
                except ValueError as e:
                    cost = 0

                cnt = data.count(tovar)

                calback = corzina.index(tovar)
                markup = user_keyboards.create_buttons_corzina_start(calback)

                await message.answer(f'–¢–æ–≤–∞—Ä 1/{len(corzina)}\n\n{tovar[0]}\n\n–ö–æ–ª-–≤–æ: {cnt} —à—Ç\n–¶–µ–Ω–∞ –∑–∞ {cnt}—à—Ç - {cnt * cost} –†—É–±.',reply_markup=markup)

                break

    if message.text == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üßë‚Äçüíª':
        await message.answer('–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É')

    if message.text == '–û –Ω–∞—Å üìå':
        await message.answer('–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏')

    if message.text == '–ö–∞—Ç–∞–ª–æ–≥ üõç':
        markup = user_keyboards.catalog_buttons()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',reply_markup=markup)

@dp.callback_query(or_f(F.data.startswith('back_corzina_'),(F.data.startswith('forward_corzina_'))))
async def pagination_corzina(callback: types.callback_query):
    user_id = callback.from_user.id
    data = requests_user.get_corzina_data(user_id)
    corzina = list(OrderedDict.fromkeys(data))

    for tovar in corzina:
        if callback.data == f'forward_corzina_{corzina.index(tovar)}':
            try:
                cost = int(tovar[0].split('–¶–µ–Ω–∞:')[-1][:-2])
            except ValueError as e:
                cost = 0

            cnt = data.count(tovar)
            if tovar == corzina[-1]:
                markup = user_keyboards.create_buttons_corzina_next_page(True,corzina.index(tovar))

                await callback.message.edit_text(text=
                    f'–¢–æ–≤–∞—Ä {corzina.index(tovar)+1}/{len(corzina)}\n\n{tovar[0]}\n\n–ö–æ–ª-–≤–æ: {cnt} —à—Ç\n–¶–µ–Ω–∞ –∑–∞ {cnt}—à—Ç - {cnt * cost} –†—É–±.',
                    reply_markup=markup)

                break

            else:
                markup = user_keyboards.create_buttons_corzina_next_page(False,corzina.index(tovar))

                await callback.message.edit_text(text=
                                                 f'–¢–æ–≤–∞—Ä {corzina.index(tovar)+1}/{len(corzina)}\n\n{tovar[0]}\n\n–ö–æ–ª-–≤–æ: {cnt} —à—Ç\n–¶–µ–Ω–∞ –∑–∞ {cnt}—à—Ç - {cnt * cost} –†—É–±.',
                                                 reply_markup=markup)

                break

        if callback.data == f'back_corzina_{corzina.index(tovar)}':
            try:
                cost = int(tovar[0].split('–¶–µ–Ω–∞:')[-1][:-2])
            except ValueError as e:
                cost = 0
            cnt = data.count(tovar)
            if tovar == corzina[0]:
                markup = user_keyboards.create_buttons_corzina_back_page(True,corzina.index(tovar))

                await callback.message.edit_text(text=
                    f'–¢–æ–≤–∞—Ä {corzina.index(tovar)+1}/{len(corzina)}\n\n{tovar[0]}\n\n–ö–æ–ª-–≤–æ: {cnt} —à—Ç\n–¶–µ–Ω–∞ –∑–∞ {cnt}—à—Ç - {cnt * cost} –†—É–±.',
                    reply_markup=markup)

                break

            else:
                markup = user_keyboards.create_buttons_corzina_back_page(False,corzina.index(tovar))

                await callback.message.edit_text(text=
                                                 f'–¢–æ–≤–∞—Ä {corzina.index(tovar)+1}/{len(corzina)}\n\n{tovar[0]}\n\n–ö–æ–ª-–≤–æ: {cnt} —à—Ç\n–¶–µ–Ω–∞ –∑–∞ {cnt}—à—Ç - {cnt * cost} –†—É–±.',
                                                 reply_markup=markup)

                break


@dp.callback_query(or_f((F.data.startswith('+1,')) , (F.data.startswith('-1,')) , (F.data.startswith('–£–¥–∞–ª–∏—Ç—å,'))))
async def corzina_plus_minus(callback: types.callback_query):
    logging.info('corzina_plus_minus')
    user_id = callback.from_user.id

    conn = sqlite3.connect('database/CORZINA_USERS.sql')
    cur = conn.cursor()
    cur.execute(f'SELECT * FROM corzina_{user_id}')
    data_old = cur.fetchall()

    corzina = list(OrderedDict.fromkeys(data_old))

    for tovar in corzina:
        if callback.data == f'-1,{corzina.index(tovar)}':

            cost = int(tovar[0].split('–¶–µ–Ω–∞:')[-1][:-2])
            cnt = data_old.count(tovar)

            cur.execute(f'DELETE FROM corzina_{user_id} WHERE rowid = (SELECT MAX(rowid) FROM corzina_{user_id} WHERE description = "{tovar[0]}") ')
            conn.commit()
            cur.execute(f'SELECT * FROM corzina_{user_id}')
            data_old = cur.fetchall()

            corzina = list(OrderedDict.fromkeys(data_old))

            index = corzina.index(tovar)

            if tovar == corzina[-1]:
                markup = user_keyboards.create_buttons_corzina_next_page(True, index)

            elif tovar == corzina[0]:
                markup = user_keyboards.create_buttons_corzina_back_page(True,index)

            else:
                markup = user_keyboards.create_buttons_corzina_next_page(False, index)

            await callback.message.edit_text(f'–¢–æ–≤–∞—Ä {corzina.index(tovar)+1}/{len(corzina)}\n\n{tovar[0]}\n\n–ö–æ–ª-–≤–æ: {cnt-1} —à—Ç\n–¶–µ–Ω–∞ –∑–∞ {cnt-1}—à—Ç - {cnt * cost} –†—É–±.',reply_markup=markup)

            break

        if callback.data == f'+1,{corzina.index(tovar)}':
            cost = int(tovar[0].split('–¶–µ–Ω–∞:')[-1][:-2])
            cnt = data_old.count(tovar)

            cur.execute(f'INSERT INTO corzina_{user_id} (description) VALUES ("{tovar[0]}")')
            conn.commit()
            cur.execute(f'SELECT * FROM corzina_{user_id}')
            data_old = cur.fetchall()

            corzina = list(OrderedDict.fromkeys(data_old))

            index = corzina.index(tovar)

            if tovar == corzina[-1]:
                markup = user_keyboards.create_buttons_corzina_next_page(True,index)
            elif tovar == corzina[0]:
                markup = user_keyboards.create_buttons_corzina_back_page(True,index)
            else:
                markup = user_keyboards.create_buttons_corzina_next_page(False,index)

            await callback.message.edit_text( f'–¢–æ–≤–∞—Ä {corzina.index(tovar)+1}/{len(corzina)}\n\n{tovar[0]}\n\n–ö–æ–ª-–≤–æ: {cnt+1} —à—Ç\n–¶–µ–Ω–∞ –∑–∞ {cnt+1}—à—Ç - {cnt * cost} –†—É–±.',reply_markup=markup)

        if callback.data == f'–£–¥–∞–ª–∏—Ç—å,{corzina.index(tovar)}':
            print(123123)
            index = corzina.index(tovar)

            if tovar == corzina[0]:
                markup = user_keyboards.button_for_deleted_tovar(True,index)
                await callback.message.edit_text(f'–¢–æ–≤–∞—Ä {corzina.index(tovar) + 1}/{len(corzina)}\n\n–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω',
                                                 reply_markup=markup)

            elif tovar == corzina[-1]:
                markup = user_keyboards.button_for_deleted_tovar(False,index)
                await callback.message.edit_text(f'–¢–æ–≤–∞—Ä {corzina.index(tovar) + 1}/{len(corzina)}\n\n–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω',
                                                 reply_markup=markup)
            else:
                markup = user_keyboards.button_for_deleted_tovar(False, index)
                await callback.message.edit_text(f'–¢–æ–≤–∞—Ä {corzina.index(tovar) + 1}/{len(corzina)}\n\n–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω',
                                                 reply_markup=markup)


            cur.execute(f'DELETE FROM corzina_{user_id} WHERE description = "{tovar[0]}"')
            conn.commit()

            corzina.remove(tovar)
            print(corzina)

            if corzina == []:
                await callback.message.edit_text(f'–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞',reply_markup=user_keyboards.empty_keyboard())


    cur.close()
    conn.close()


@dp.callback_query(F.data.startswith('–†–∞–∑–¥–µ–ª'))
async def buttons_razdel(callback: types.CallbackQuery):
    logging.info('buttons_razdel')
    user_id = callback.from_user.id


    SQL_name = 'TOVARI.sql'
    table_name = ''
    description = ''

    if callback.data == '–†–∞–∑–¥–µ–ª –ï–º–∫–æ—Å—Ç–∏ –Ω–∞–∑–µ–º–Ω—ã–µ':
        table_name = 'ground_tanks'
        description = '–ï–º_–Ω–∞–∑'

    if callback.data == '–†–∞–∑–¥–µ–ª –ï–º–∫–æ—Å—Ç–∏ –ø–æ–¥–∑–µ–º–Ω—ã–µ':
        table_name = 'underground_tanks'
        description = '–ï–º_–ø–æ–¥–∑'

    if callback.data == '–†–∞–∑–¥–µ–ª –î–ª—è –¥–∞—á–∏':
        table_name = 'for_village'
        description = '–î–∞—á–∞'

    if callback.data == '–†–∞–∑–¥–µ–ª –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ':
        table_name = 'accessories'
        description = '–ö–æ–º–ø–ª'

    if callback.data == '–†–∞–∑–¥–µ–ª –ú—É—Å–æ—Ä–æ—Å–±—Ä–æ—Å—ã':
        table_name = 'for_trash'
        description = '–ú—É—Å–æ—Ä'
    if callback.data == '–†–∞–∑–¥–µ–ª —è—â–∏–∫–∏':
        table_name = 'Boxes'
        description = '–ö–æ—Ä–æ–±'
    if callback.data == '–†–∞–∑–¥–µ–ª –ê–ó–°':
        table_name = 'azs'
        description = '–ê–∑—Å'
    if callback.data == '–†–∞–∑–¥–µ–ª –ó–∞–ø—á–∞—Å—Ç–∏ –ê–ó–°':
        table_name = 'azs_parts'
        description = '–ó–∞–ø_–∞–∑—Å'

    data = requests_user.get_razdel(SQL_name,table_name)

    razdeli = []

    for elem in data:
        razdeli.append(elem[0])

    razdeli_new = []
    for elem in razdeli:
        if elem not in razdeli_new:
            razdeli_new.append(elem)

    markup = types.InlineKeyboardMarkup(inline_keyboard=[])
    cnt = 0

    razdeli_new_str = '[' + str(razdeli_new) + ',' + str([description]) + ']'
    requests_user.update_name_razdel(razdeli_new_str,user_id)

    for razdel in razdeli_new:
        if cnt <8:
            cnt+=1
            btn = types.InlineKeyboardButton(text=f'{razdel}',callback_data=f'{description},{razdeli_new.index(razdel)}')
            markup.inline_keyboard.append([btn])
        if cnt == 8:
            btn1 = types.InlineKeyboardButton(text='>>>',callback_data='forward razdel 2')
            markup.inline_keyboard.append([btn1])
            await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', reply_markup=markup)
            break

    if cnt == 1:
        name_razdel = ''
        key = description

        table_name = my_dict[key][1]
        sql_name = my_dict[key][0]

        index = 0
        data = requests_user.choice_name_razdel(sql_name, table_name)

        razdeli = []

        for elem in data:
            razdeli.append(elem[0])

        razdeli_new = []
        for elem in razdeli:
            if elem not in razdeli_new:
                razdeli_new.append(elem)

        for razdel in razdeli_new:
            if razdeli_new.index(razdel) == index:
                name_razdel = razdel

        info = requests_user.get_info_razdel(sql_name, table_name, name_razdel)

        info_str = str(info)

        requests_user.update_userdata_info_key(info_str, key, user_id)

        markup = types.InlineKeyboardMarkup(inline_keyboard=[])
        cnt = 0
        cnt_pages = int(len(info) / 5) + 1
        for elem in info:
            if cnt < 5:
                btn = types.InlineKeyboardButton(text=f'{elem[1]}', callback_data=f'–¢–æ–≤–∞—Ä:{elem[-1]}')
                markup.inline_keyboard.append([btn])
                cnt += 1
            if cnt == 5:
                btn2 = types.InlineKeyboardButton(text='>>>', callback_data='forward 2')
                markup.inline_keyboard.append([btn2])
                await callback.message.edit_text(text=f'{elem[0]}\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{cnt_pages}', reply_markup=markup)
                break
        else:
            await callback.message.edit_text(text=f'{info[0][0]}',reply_markup=markup)

    else:
        await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª',reply_markup=markup)


@dp.callback_query(or_f(F.data.startswith('forward razdel') , F.data.startswith('back razdel')))
async def pagination_razdel(callback: types.CallbackQuery):
    logging.info('pagination_razdel')
    user_id = callback.from_user.id
    info_str = requests_user.select_info_from_user_data(user_id)

    razdeli_list = eval(info_str[0][0])
    razdeli = razdeli_list[0]
    description = razdeli_list[-1][0]
    cnt_pages = int(len(razdeli) / 5) +1
    for i in range(cnt_pages+1):

        if callback.data == f'forward razdel {i}':
            markup = types.InlineKeyboardMarkup(inline_keyboard=[])
            cnt = 0
            page = i-1
            for elem in razdeli[8*page:]:
                if cnt<8:
                    btn = types.InlineKeyboardButton(text=f'{elem}',callback_data=f'{description},{razdeli.index(elem)}')
                    markup.inline_keyboard.append([btn])
                if cnt == 8:
                    btn1 = types.InlineKeyboardButton(text='>>>', callback_data=f'forward razdel {i+1}')
                    btn2 = types.InlineKeyboardButton(text='<<<',callback_data=f'back razdel {i}')
                    markup.inline_keyboard.append([btn1,btn2])
                    await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª', reply_markup=markup)
                    break
            else:
                btn_back = types.InlineKeyboardButton(text='<<<',callback_data=f'back razdel {i}')
                markup.inline_keyboard.append([btn_back])
                await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª', reply_markup=markup)

        if callback.data == f'back razdel {i}':
            markup = types.InlineKeyboardMarkup(inline_keyboard=[])
            cnt = 0
            page_start = i-2
            page_end = i-1
            for elem in razdeli[page_start*8:8*page_end]:
                if cnt<8:
                    btn = types.InlineKeyboardButton(text=f'{elem}',callback_data=f'{description},{razdeli.index(elem)}')
                    markup.inline_keyboard.append([btn])
                    cnt+=1
                if cnt == 8 and page_start == 0:
                    btn_forward = types.InlineKeyboardButton(text='>>>',callback_data=f'forward razdel {i}')
                    markup.inline_keyboard.append([btn_forward])
                    await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª', reply_markup=markup)
                    break
                if cnt == 8 and page_start!=0:
                    btn_back = types.InlineKeyboardButton(text='<<<',callback_data=f'back razdel {i+1}')
                    btn_forward = types.InlineKeyboardButton(text='>>>', callback_data=f'forward razdel {i + 1}')
                    markup.inline_keyboard.append([btn_back,btn_forward])
                    await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', reply_markup=markup)
                    break



@dp.callback_query(lambda F:any(F.data.startswith(key) for key in my_dict.keys()))
async def tovari(callback: types.CallbackQuery):
    logging.info('tovari')
    user_id = callback.from_user.id
    for key in my_dict.keys():
        if key in callback.data:
            name_razdel = ''

            table_name = my_dict[key][1]
            sql_name = my_dict[key][0]

            index = int(str(callback.data).split(',')[1])
            data = requests_user.choice_name_razdel(sql_name,table_name)

            razdeli = []

            for elem in data:
                razdeli.append(elem[0])

            razdeli_new = []
            for elem in razdeli:
                if elem not in razdeli_new:
                    razdeli_new.append(elem)

            for razdel in razdeli_new:
                if razdeli_new.index(razdel) == index:
                    name_razdel = razdel

            info = requests_user.get_info_razdel(sql_name,table_name,name_razdel)

            info_str = str(info)

            requests_user.update_userdata_info_key(info_str,key,user_id)

            markup = types.InlineKeyboardMarkup(inline_keyboard=[])
            cnt = 0
            cnt_pages = int(len(info)/5) + 1
            for elem in info:
                if cnt<5:
                    btn = types.InlineKeyboardButton(text=f'{elem[1]}',callback_data=f'–¢–æ–≤–∞—Ä:{elem[-1]}')
                    markup.inline_keyboard.append([btn])
                    cnt+=1
                if cnt == 5:
                    btn2 = types.InlineKeyboardButton(text='>>>',callback_data='forward 2')
                    markup.inline_keyboard.append([btn2])
                    await callback.message.edit_text(text=f'{elem[0]}\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{cnt_pages}', reply_markup=markup)
                    break
            else:
                await callback.message.edit_text(text=f'{info[0][0]}:', reply_markup=markup)

@dp.callback_query(or_f(F.data.startswith('back'),F.data.startswith('forward')))
async def pagination(callback: types.CallbackQuery):
    logging.info('pagination')
    user_id = callback.from_user.id

    info_str = requests_user.select_info_from_user_data(user_id)

    info = eval(info_str[0][0])

    cnt_pages = int(len(info) / 5) + 1
    for i in range(cnt_pages + 1):
        if callback.data == f'forward {i}':
            markup = types.InlineKeyboardMarkup(inline_keyboard=[])
            cnt = 0
            page = i-1
            for elem in info[5*page:]:
                if cnt<5:
                    btn = types.InlineKeyboardButton(text=f'{elem[1]}',callback_data=f'–¢–æ–≤–∞—Ä:{elem[-1]}')
                    markup.inline_keyboard.append([btn])
                    cnt+=1
                if cnt == 5:
                    btn_back = types.InlineKeyboardButton(text='<<<',callback_data=f'back {i}')
                    btn_forward = types.InlineKeyboardButton(text='>>>',callback_data=f'forward {i+1}')
                    markup.inline_keyboard.append([btn_back,btn_forward])
                    await callback.message.edit_text(f'{elem[0]}\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞: {i}/{cnt_pages}', reply_markup=markup)
                    break
            else:
                btn_back = types.InlineKeyboardButton(text='<<<',callback_data=f'back {i}')
                markup.inline_keyboard.append([btn_back])
                await callback.message.edit_text(f'{elem[0]}\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞: {i}/{cnt_pages}', reply_markup=markup)

        if callback.data == f'back {i}':
            markup_2 = types.InlineKeyboardMarkup(inline_keyboard=[])
            cnt = 0
            page_start = i-2
            page_end = i-1
            for elem in info[page_start*5:5*page_end]:
                if cnt < 5:
                    btn = types.InlineKeyboardButton(text=f'{elem[1]}', callback_data=f'–¢–æ–≤–∞—Ä:{elem[-1]}')
                    markup_2.inline_keyboard.append([btn])
                    cnt += 1
                if cnt == 5 and page_start == 0:
                    btn_forward = types.InlineKeyboardButton(text='>>>', callback_data=f'forward {i + 1}')
                    markup_2.inline_keyboard.append([btn_forward])
                    await callback.message.edit_text(f'{elem[0]}\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞: {i-1}/{cnt_pages}', reply_markup=markup_2)
                    break

                if cnt == 5 and page_start!= 0:
                    btn_back = types.InlineKeyboardButton(text='<<<',callback_data=f'back {i-1}')
                    btn_forward = types.InlineKeyboardButton(text='>>>', callback_data=f'forward {i + 1}')
                    markup_2.inline_keyboard.append([btn_back,btn_forward])
                    await callback.message.edit_text(f'{elem[0]}\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞: {i-1}/{cnt_pages}', reply_markup=markup_2)
                    break

@dp.callback_query(F.data.startswith('–¢–æ–≤–∞—Ä:'))
async def choice_tovar(callback: types.CallbackQuery):
    logging.info('choice_tovar')
    user_id = callback.from_user.id

    key_str,info_str = requests_user.get_tovar_info(user_id)

    key = key_str[0][0]
    info = eval(info_str[0][0])

    if key == '–ï–º_–Ω–∞–∑' or key == '–ï–º_–ø–æ–¥–∑':
        for elem in info:
            if callback.data == f'–¢–æ–≤–∞—Ä:{elem[-1]}':

                elem_str = str(elem)

                requests_user.set_tovar(elem_str,user_id)

                name = elem[1]
                art = elem[2]
                size = elem[3]
                weight = elem[4]
                volume = elem[5]
                cost_mitichi = elem[6]
                cost_zuevo = elem[7]

                photo = requests_user.get_photo_id_by_name(f'{elem[8]}')
                print(photo)


                markup = user_keyboards.tanks_sklad_buttons()
                await bot.delete_message(callback.from_user.id,callback.message.message_id)
                await bot.send_photo(chat_id=callback.from_user.id,photo=photo,caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {name} \n\n'
                                                                            f'–ê—Ä—Ç–∏–∫—É–ª: {art} \n\n'
                                                                            f'–†–∞–∑–º–µ—Ä: {size} \n\n'
                                                                            f'–í–µ—Å: {weight} –ö–ì \n\n'
                                                                            f'–û–±—å–µ–º: {volume} \n\n'
                                                                            f'–¶–µ–Ω–∞ —Å–∫–ª–∞–¥ –ú—ã—Ç–∏—â–∏: {cost_mitichi} –† \n\n'
                                                                            f'–¶–µ–Ω–∞ —Å–∫–ª–∞–¥ –û—Ä–µ—Ö–æ–≤–æ-–∑—É–µ–≤–æ: {cost_zuevo} –† \n\n'
                                                                            f'* –¶–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è \n\n'
                                                                          f'–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–∫–ª–∞–¥–∞',reply_markup=markup)

    if key == '–î–∞—á–∞':
        for elem in info:
            if callback.data == f'–¢–æ–≤–∞—Ä:{elem[-1]}':
                elem_str = str(elem)

                requests_user.set_tovar(elem_str,user_id)

                name = elem[1]
                art = elem[2]
                size = elem[3]
                weight = elem[4]
                cost_mitichi = elem[5]
                cost_zuevo = elem[6]

                photo = requests_user.get_photo_id_by_name(f'{elem[8]}')

                markup = user_keyboards.dacha_sklad_buttons()
                await bot.delete_message(callback.from_user.id,callback.message.message_id)
                await bot.send_photo(chat_id=callback.from_user.id,photo=photo,caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {name} \n\n'
                                                                            f'–ê—Ä—Ç–∏–∫—É–ª: {art} \n\n'
                                                                            f'–†–∞–∑–º–µ—Ä: {size} \n\n'
                                                                            f'–í–µ—Å: {weight} –ö–ì\n\n'
                                                                            f'–¶–µ–Ω–∞ —Å–∫–ª–∞–¥ –ú—ã—Ç–∏—â–∏: {cost_mitichi} –† \n\n'
                                                                            f'–¶–µ–Ω–∞ —Å–∫–ª–∞–¥ –û—Ä–µ—Ö–æ–≤–æ-–∑—É–µ–≤–æ: {cost_zuevo} –† \n\n'
                                                                            f'* –¶–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è \n\n'
                                                                          f'–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–∫–ª–∞–¥–∞',reply_markup=markup)

    if key == '–ö–æ–º–ø–ª':
        for elem in info:
            if callback.data == f'–¢–æ–≤–∞—Ä:{elem[-1]}':
                elem_str = str(elem)

                requests_user.set_tovar(elem_str,user_id)

                name = elem[1]
                art = elem[2]
                cost_mitichi = elem[3]
                cost_zuevo = elem[4]

                photo = requests_user.get_photo_id_by_name(f'{elem[5]}')


                markup = user_keyboards.kompl_skald_buttons()
                await bot.delete_message(callback.from_user.id,callback.message.message_id)
                await bot.send_photo(chat_id=callback.from_user.id,photo=photo,caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {name} \n\n'
                                                                            f'–ê—Ä—Ç–∏–∫—É–ª: {art} \n\n'
                                                                            f'–¶–µ–Ω–∞ —Å–∫–ª–∞–¥ –ú—ã—Ç–∏—â–∏: {cost_mitichi} P \n\n'
                                                                            f'–¶–µ–Ω–∞ —Å–∫–ª–∞–¥ –û—Ä–µ—Ö–æ–≤–æ-–∑—É–µ–≤–æ: {cost_zuevo} P \n\n'
                                                                            f'* –¶–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è \n\n'
                                                                          f'–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–∫–ª–∞–¥–∞',reply_markup=markup)

    if key == '–ú—É—Å–æ—Ä':
        for elem in info:
            if callback.data == f'–¢–æ–≤–∞—Ä:{elem[-1]}':
                elem_str = str(elem)

                requests_user.set_tovar(elem_str,user_id)

                name = elem[1]
                art = elem[2]
                haract = elem[3]
                weight = elem[4]
                cost_mitichi = elem[5]

                photo = requests_user.get_photo_id_by_name(f'{elem[6]}')

                markup = user_keyboards.corzina_musor_button()
                await bot.delete_message(callback.from_user.id,callback.message.message_id)
                await bot.send_photo(chat_id=callback.from_user.id,photo=photo,caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {name} \n\n'
                                                                            f'–ê—Ä—Ç–∏–∫—É–ª: {art} \n\n'
                                                                            f'–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {haract} \n\n'
                                                                            f'–í–µ—Å: {weight} –ö–ì\n\n'
                                                                            f'–¶–µ–Ω–∞ —Å–∫–ª–∞–¥ –ú—ã—Ç–∏—â–∏: {cost_mitichi} –† \n\n'
                                                                            f'* –¶–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è \n\n',reply_markup=markup)

    if key == '–ö–æ—Ä–æ–±':
        for elem in info:
            if callback.data == f'–¢–æ–≤–∞—Ä:{elem[-1]}':
                elem_str = str(elem)

                requests_user.set_tovar(elem_str,user_id)

                name = elem[1]
                art = elem[2]
                obiem = elem[3]
                size = elem[4]
                weight = elem[5]
                cost_mitichi = elem[6]
                cost_zuevo = elem[7]

                photo = requests_user.get_photo_id_by_name(f'{elem[8]}')

                markup = user_keyboards.boxes_sklad_buttons()
                await bot.delete_message(callback.from_user.id,callback.message.message_id)
                await bot.send_photo(chat_id=callback.from_user.id,photo=photo,caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {name} \n\n'
                                                                            f'–ê—Ä—Ç–∏–∫—É–ª: {art} \n\n'
                                                                            f'–û–±—å–µ–º: {obiem} –õ \n\n'
                                                                            f'–†–∞–∑–º–µ—Ä: {size} \n\n'
                                                                            f'–í–µ—Å: {weight} –ö–ì \n\n'
                                                                            f'–¶–µ–Ω–∞ —Å–∫–ª–∞–¥ –ú—ã—Ç–∏—â–∏: {cost_mitichi} –† \n\n'
                                                                            f'–¶–µ–Ω–∞ —Å–∫–ª–∞–¥ –û—Ä–µ—Ö–æ–≤–æ-–∑—É–µ–≤–æ: {cost_zuevo} –† \n\n'
                                                                            f'* –¶–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è \n\n'
                                                                          f'–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–∫–ª–∞–¥–∞',reply_markup=markup)

    if key == '–ê–∑—Å':
        for elem in info:
            if callback.data == f'–¢–æ–≤–∞—Ä:{elem[-1]}':
                elem_str = str(elem)

                requests_user.set_tovar(elem_str,user_id)

                name = elem[1]
                obiem = elem[2]
                size = elem[3]
                art_PIUSU = elem[4]
                cost_PIUSI = elem[5]
                art_BelAk = elem[6]
                cost_BelAk = elem[7]
                art_china_premium = elem[8]
                cost_china_premium = elem[9]
                art_china = elem[10]
                cost_china = elem[11]
                markup = user_keyboards.AZS_sklad_buttons()
                await bot.delete_message(callback.from_user.id,callback.message.message_id)


                await callback.message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {name} \n\n'
                                                                f'–û–±—å–µ–º: {obiem} –õ \n\n'
                                                                f'–†–∞–∑–º–µ—Ä: {size} \n\n'
                                                                f'–ê—Ä—Ç–∏–∫—É–ª PUISI: {art_PIUSU} \n'
                                                                f'–¶–µ–Ω–∞ PIUSI: {cost_PIUSI} –†\n\n'
                                                                f'–ê—Ä—Ç–∏–∫—É–ª –ë–µ–ª–ê–∫: {art_BelAk} \n'
                                                                f'–¶–µ–Ω–∞ –ë–µ–ª–ê–∫: {cost_BelAk} –†\n\n'
                                                                f'–ê—Ä—Ç–∏–∫—É–ª –ö–∏—Ç–∞–π –ü—Ä–µ–º–∏—É–º: {art_china_premium} \n'
                                                                f'–¶–µ–Ω–∞ –ö–∏—Ç–∞–π –ü—Ä–µ–º–∏—É–º: {cost_china_premium} –† \n\n'
                                                                f'–ê—Ä—Ç–∏–∫—É–ª –ö–∏—Ç–∞–π :{art_china} \n'
                                                                f'–¶–µ–Ω–∞ –ö–∏—Ç–∞–π: {cost_china} –†\n\n'
                                                                f'–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–∫–ª–∞–¥–∞',reply_markup=markup)
    if key == '–ó–∞–ø_–∞–∑—Å':
        for elem in info:
            if callback.data == f'–¢–æ–≤–∞—Ä:{elem[-1]}':
                elem_str = str(elem)

                requests_user.set_tovar(elem_str,user_id)

                name = elem[1]
                art = elem[2]
                cost = elem[3]
                markup = user_keyboards.corzina_zap_azs()
                await bot.delete_message(callback.from_user.id,callback.message.message_id)
                await callback.message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {name} \n\n'
                                                                f'–ê—Ä—Ç–∏–∫—É–ª: {art} \n\n'
                                                                f'–¶–µ–Ω–∞: {cost} –õ \n\n',reply_markup=markup)

@dp.callback_query(F.data.startswith('–ö–æ—Ä–∑–∏–Ω–∞ '))
async def add_to_corzina(callback: types.CallbackQuery):
    logging.info('add_to_corzina')
    user_id = callback.from_user.id

    data = requests_user.select_tovar_from_user_data(user_id)

    tovar = eval(data[0][0])
    if callback.data == '–ö–æ—Ä–∑–∏–Ω–∞ –ï–º–∫–æ—Å—Ç–∏ –ú—ã—Ç':
        description = f'–¢–æ–≤–∞—Ä: {tovar[1]}\n–ê—Ä—Ç–∏–∫—É–ª: {tovar[2]}\n–†–∞–∑–º–µ—Ä: {tovar[3]} \n–í–µ—Å: {tovar[4]} –ö–ì\n–û–±—å–µ–º: {tovar[5]} –õ \n–¶–µ–Ω–∞: {tovar[6]} –†'
        if str(tovar[6]) != 'None' and str(tovar[6]) != '—Å–∫–æ—Ä–æ' and str(tovar[6] != '–ø–æ–¥ –∑–∞–∫–∞–∑'):
            requests_user.insert_tovar_into_corzina(user_id,description)
            await callback.message.answer(f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É —Å–æ —Å–∫–ª–∞–¥–∞ –ú—ã—Ç–∏—â–∏')
        else:
            await callback.message.answer('–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ —Å–∫–ª–∞–¥–µ,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥')

    if callback.data == '–ö–æ—Ä–∑–∏–Ω–∞ –ï–º–∫–æ—Å—Ç–∏ –û—Ä–µ—Ö':
        description = f'–¢–æ–≤–∞—Ä: {tovar[1]} \n–ê—Ä—Ç–∏–∫—É–ª: {tovar[2]}\n–†–∞–∑–º–µ—Ä: {tovar[3]} \n–í–µ—Å: {tovar[4]} –ö–ì\n–û–±—å–µ–º: {tovar[5]} –õ \n–¶–µ–Ω–∞: {tovar[7]} –†'
        if str(tovar[7]) != 'None' and str(tovar[7]) != '—Å–∫–æ—Ä–æ' and str(tovar[7] != '–ø–æ–¥ –∑–∞–∫–∞–∑'):
            requests_user.insert_tovar_into_corzina(user_id, description)
            await callback.message.answer(f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É —Å–æ —Å–∫–ª–∞–¥–∞ –û—Ä–µ—Ö–æ–≤–æ-–ó—É–µ–≤–æ')
        else:
            await callback.message.answer('–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ —Å–∫–ª–∞–¥–µ,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥')

    if callback.data == '–ö–æ—Ä–∑–∏–Ω–∞ –¥–∞—á–∞ –ú—ã—Ç':
        description = f'–¢–æ–≤–∞—Ä: {tovar[1]} \n–ê—Ä—Ç–∏–∫—É–ª: {tovar[2]}\n–†–∞–∑–º–µ—Ä: {tovar[3]} \n–í–µ—Å: {tovar[4]} –ö–ì\n–¶–µ–Ω–∞: {tovar[5]} –†'
        if str(tovar[5]) != 'None'and str(tovar[5]) != '—Å–∫–æ—Ä–æ' and str(tovar[5] != '–ø–æ–¥ –∑–∞–∫–∞–∑'):
            requests_user.insert_tovar_into_corzina(user_id, description)
            await callback.message.answer(f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É —Å–æ —Å–∫–ª–∞–¥–∞ –ú—ã—Ç–∏—â–∏')
        else:
            await callback.message.answer('–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ —Å–∫–ª–∞–¥–µ,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥')

    if callback.data == '–ö–æ—Ä–∑–∏–Ω–∞ –¥–∞—á–∞ –û—Ä–µ—Ö':
        description = f'–¢–æ–≤–∞—Ä: {tovar[1]} \n–ê—Ä—Ç–∏–∫—É–ª: {tovar[2]}\n–†–∞–∑–º–µ—Ä: {tovar[3]} \n–í–µ—Å: {tovar[4]} –ö–ì\n–¶–µ–Ω–∞: {tovar[6]} –†'
        if str(tovar[6]) != 'None' and str(tovar[6]) != '—Å–∫–æ—Ä–æ' and str(tovar[6] != '–ø–æ–¥ –∑–∞–∫–∞–∑'):
            requests_user.insert_tovar_into_corzina(user_id, description)
            await callback.message.answer(f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É —Å–æ —Å–∫–ª–∞–¥–∞ –û—Ä–µ—Ö–æ–≤–æ-–ó—É–µ–≤–æ')
        else:
            await callback.message.answer('–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ —Å–∫–ª–∞–¥–µ,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥')

    if callback.data == '–ö–æ—Ä–∑–∏–Ω–∞ –∫–æ–º–ø–ª –ú—ã—Ç':
        description = f'–¢–æ–≤–∞—Ä: {tovar[1]} \n–ê—Ä—Ç–∏–∫—É–ª: {tovar[2]}\n–¶–µ–Ω–∞: {tovar[3]} –†'
        if str(tovar[3]) != 'None' and str(tovar[3]) != '—Å–∫–æ—Ä–æ' and str(tovar[3] != '–ø–æ–¥ –∑–∞–∫–∞–∑'):
            requests_user.insert_tovar_into_corzina(user_id, description)
            await callback.message.answer(f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É —Å–æ —Å–∫–ª–∞–¥–∞ –ú—ã—Ç–∏—â–∏')
        else:
            await callback.message.answer('–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ —Å–∫–ª–∞–¥–µ,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥')

    if callback.data == '–ö–æ—Ä–∑–∏–Ω–∞ –∫–æ–º–ø–ª –û—Ä–µ—Ö':
        description = f'–¢–æ–≤–∞—Ä: {tovar[1]} \n–ê—Ä—Ç–∏–∫—É–ª: {tovar[2]}\n–¶–µ–Ω–∞: {tovar[4]} –†'
        if str(tovar[4]) != 'None' and str(tovar[4]) != '—Å–∫–æ—Ä–æ' and str(tovar[4] != '–ø–æ–¥ –∑–∞–∫–∞–∑'):
            requests_user.insert_tovar_into_corzina(user_id, description)
            await callback.message.answer(f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É —Å–æ —Å–∫–ª–∞–¥–∞ –û—Ä–µ—Ö–æ–≤–æ-–ó—É–µ–≤–æ')
        else:
            await callback.message.answer('–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ —Å–∫–ª–∞–¥–µ,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥')

    if callback.data == '–ö–æ—Ä–∑–∏–Ω–∞ –º—É—Å–æ—Ä':
        description = f'–¢–æ–≤–∞—Ä: {tovar[1]} \n–ê—Ä—Ç–∏–∫—É–ª: {tovar[2]}\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:{tovar[3]}\n–í–µ—Å: {tovar[4]} –ö–ì\n–¶–µ–Ω–∞: {tovar[5]} –†'
        if str(tovar[5]) != 'None' and str(tovar[5]) != '—Å–∫–æ—Ä–æ' or str(tovar[5] != '–ø–æ–¥ –∑–∞–∫–∞–∑'):
            requests_user.insert_tovar_into_corzina(user_id, description)
            await callback.message.answer(f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
        else:
            await callback.message.answer('–í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ')

    if callback.data == '–ö–æ—Ä–∑–∏–Ω–∞ –∫–æ—Ä–æ–± –ú—ã—Ç':
        description = f'–¢–æ–≤–∞—Ä: {tovar[1]} \n–ê—Ä—Ç–∏–∫—É–ª: {tovar[2]}\n–û–±—å–µ–º: {tovar[3]} –õ\n–†–∞–∑–º–µ—Ä: {tovar[4]}\n–í–µ—Å: {tovar[5]} –ö–ì\n–¶–µ–Ω–∞: {tovar[6]} –†'
        if str(tovar[6]) != 'None' and str(tovar[6]) != '—Å–∫–æ—Ä–æ' and str(tovar[6] != '–ø–æ–¥ –∑–∞–∫–∞–∑'):
            requests_user.insert_tovar_into_corzina(user_id, description)
            await callback.message.answer(f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É —Å–æ —Å–∫–ª–∞–¥–∞ –ú—ã—Ç–∏—â–∏')
        else:
            await callback.message.answer('–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ —Å–∫–ª–∞–¥–µ,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥')

    if callback.data == '–ö–æ—Ä–∑–∏–Ω–∞ –∫–æ—Ä–æ–± –û—Ä–µ—Ö':
        description = f'–¢–æ–≤–∞—Ä: {tovar[1]} \n–ê—Ä—Ç–∏–∫—É–ª: {tovar[2]}\n–û–±—å–µ–º: {tovar[3]} –õ\n–†–∞–∑–º–µ—Ä: {tovar[4]}\n–í–µ—Å: {tovar[5]} –ö–ì\n–¶–µ–Ω–∞: {tovar[7]} –†'
        if str(tovar[7]) != 'None' and str(tovar[7]) != '—Å–∫–æ—Ä–æ' and str(tovar[7] != '–ø–æ–¥ –∑–∞–∫–∞–∑'):
            requests_user.insert_tovar_into_corzina(user_id, description)
            await callback.message.answer(f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É —Å–æ —Å–∫–ª–∞–¥–∞ –û—Ä–µ—Ö–æ–≤–æ-–ó—É–µ–≤–æ')
        else:
            await callback.message.answer('–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ —Å–∫–ª–∞–¥–µ,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥')

    if callback.data == '–ö–æ—Ä–∑–∏–Ω–∞ –ê–ó–° PIUSI':
        description = f'–¢–æ–≤–∞—Ä: {tovar[1]} \n–û–±—å–µ–º: {tovar[2]} –õ\n–†–∞–∑–º–µ—Ä: {tovar[3]}\n–ê—Ä—Ç–∏–∫—É–ª: {tovar[4]}\n–¶–µ–Ω–∞: {tovar[5]} –†'
        if str(tovar[5]) != 'None' and str(tovar[5]) != '—Å–∫–æ—Ä–æ' and str(tovar[5] != '–ø–æ–¥ –∑–∞–∫–∞–∑'):
            requests_user.insert_tovar_into_corzina(user_id, description)
            await callback.message.answer(f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
        else:
            await callback.message.answer('–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ —Å–∫–ª–∞–¥–µ,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥')

    if callback.data == '–ö–æ—Ä–∑–∏–Ω–∞ –ê–ó–° –ë–µ–ª–ê–∫':
        description = f'–¢–æ–≤–∞—Ä: {tovar[1]} \n–û–±—å–µ–º: {tovar[2]} –õ\n–†–∞–∑–º–µ—Ä: {tovar[3]}\n–ê—Ä—Ç–∏–∫—É–ª: {tovar[6]}\n–¶–µ–Ω–∞: {tovar[7]} –†'
        if str(tovar[7]) != 'None' and str(tovar[7]) != '—Å–∫–æ—Ä–æ' and str(tovar[7] != '–ø–æ–¥ –∑–∞–∫–∞–∑'):
            requests_user.insert_tovar_into_corzina(user_id, description)
            await callback.message.answer(f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
        else:
            await callback.message.answer('–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ —Å–∫–ª–∞–¥–µ,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥')

    if callback.data == '–ö–æ—Ä–∑–∏–Ω–∞ –ê–ó–° –ö–∏—Ç_–ø—Ä–µ–º':
        description = f'–¢–æ–≤–∞—Ä: {tovar[1]} \n–û–±—å–µ–º: {tovar[2]} –õ\n–†–∞–∑–º–µ—Ä: {tovar[3]}\n–ê—Ä—Ç–∏–∫—É–ª: {tovar[8]}\n–¶–µ–Ω–∞: {tovar[9]} –†'
        if str(tovar[9]) != 'None' and str(tovar[9]) != '—Å–∫–æ—Ä–æ' and str(tovar[9] != '–ø–æ–¥ –∑–∞–∫–∞–∑'):
            requests_user.insert_tovar_into_corzina(user_id, description)
            await callback.message.answer(f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
        else:
            await callback.message.answer('–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ —Å–∫–ª–∞–¥–µ,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥')

    if callback.data == '–ö–æ—Ä–∑–∏–Ω–∞ –ê–ó–° –∫–∏—Ç–∞–π':
        description = f'–¢–æ–≤–∞—Ä: {tovar[1]} \n–û–±—å–µ–º: {tovar[2]} –õ\n–†–∞–∑–º–µ—Ä: {tovar[3]}\n–ê—Ä—Ç–∏–∫—É–ª: {tovar[10]}\n–¶–µ–Ω–∞: {tovar[11]} –†'
        if str(tovar[11]) != 'None' and str(tovar[11]) != '—Å–∫–æ—Ä–æ' and str(tovar[11] != '–ø–æ–¥ –∑–∞–∫–∞–∑'):
            requests_user.insert_tovar_into_corzina(user_id, description)
            await callback.message.answer(f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
        else:
            await callback.message.answer('–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ —Å–∫–ª–∞–¥–µ,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥')

    if callback.data == '–ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–ø_–∞–∑—Å':
        description = f'–¢–æ–≤–∞—Ä: {tovar[1]} \n–ê—Ä—Ç–∏–∫—É–ª: {tovar[2]}\n–¶–µ–Ω–∞: {tovar[3]} –†'
        if str(tovar[3]) != 'None' and str(tovar[3]) != '—Å–∫–æ—Ä–æ' and str(tovar[3] != '–ø–æ–¥ –∑–∞–∫–∞–∑'):
            requests_user.insert_tovar_into_corzina(user_id, description)
            await callback.message.answer(f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
        else:
            await callback.message.answer('–í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ')



@dp.callback_query(or_f(F.data.startswith('–ò—Å—Ç–æ—Ä–∏—è'),F.data.startswith('–ò–∑–º–µ–Ω–∏—Ç—å'),F.data.startswith('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑')))
async def change_data_or_history (callback: types.CallbackQuery):
    logging.info('change_data_or_history')
    user_id = callback.from_user.id
    if '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑' in callback.data:
        data = requests_user.select_all_from_history(user_id)

        for zakaz in data:
            if callback.data == f'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑ {data.index(zakaz)}':
                zakaz_id = requests_user.povtor_zakaz(user_id,zakaz)

                await callback.message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞,–≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è')
                for manager in manager_id:
                    await bot.send_message(manager,f'–ö–ª–∏–µ–Ω—Ç: tg://user?id={user_id} \n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {zakaz_id} \n\n{zakaz[2]}')


    if callback.data == f'–ò—Å—Ç–æ—Ä–∏—è {user_id}':

        data = requests_user.select_all_from_history(user_id)
        if data != []:
            await bot.delete_message(callback.from_user.id,callback.message.message_id)
            for zakaz in data:

                markup = user_keyboards.povtor_zakaz_buttons(data.index(zakaz))

                await callback.message.answer(f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {zakaz[0]}'f'\n{zakaz[2]}',reply_markup=markup)
        else:
            await bot.delete_message(callback.from_user.id,callback.message.message_id)
            await callback.message.answer('–í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞')

    if callback.data == f'–ò–∑–º–µ–Ω–∏—Ç—å {user_id}':

        markup = user_keyboards.rechange_user_data_buttons(user_id)
        await callback.message.answer('–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?',reply_markup=markup)


@dp.callback_query(or_f(F.data.startswith('–§–ò–û'),F.data.startswith('–ì–æ—Ä–æ–¥'),F.data.startswith('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')))
async def change_data(callback: types.CallbackQuery,state:FSMContext):
    logging.info('change_data')
    user_id = callback.from_user.id
    data = requests_user.get_user_info(user_id)
    print(data)
    name = data[0][1]
    lastname = data[0][2]
    patronymik = data[0][3]
    city = data[0][4]
    phone_numder = data[0][5]

    if callback.data == f'–§–ò–û {user_id}':
        await  callback.message.edit_text(text=f'–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –§–ò–û: {name},{lastname},{patronymik}\n\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: "–§–∞–º–∏–ª–∏—è,–ò–º—è,–û—Ç—á–µ—Å—Ç–≤–æ"',reply_markup=user_keyboards.empty_keyboard())
        await state.set_state(FSMFillForm.change_fio)
    if callback.data == f'–ì–æ—Ä–æ–¥ {user_id}':
        await callback.message.edit_text(text=f'–í–∞—à —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {city}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞',reply_markup=user_keyboards.empty_keyboard())
        await state.set_state(FSMFillForm.change_city)
    if callback.data == f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {user_id}':
        await callback.message.edit_text(text=f'–í–∞—à —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_numder}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',reply_markup=user_keyboards.empty_keyboard())
        await state.set_state(FSMFillForm.change_phone_number)

@dp.message(StateFilter(FSMFillForm.change_fio))
async def get_new_fio(message: types.Message,state:FSMContext):
    logging.info('get_new_fio')
    user_id = message.from_user.id
    new_fio_old = str(message.text)
    try:
        message_id_in_list = (requests_user.select_info_from_user_data(user_id))
        message_id = int(message_id_in_list[0][0])

        new_fio_new = new_fio_old.split(',')
        name = new_fio_new[0]
        surname = new_fio_new[1]
        patronymik = new_fio_new[2]

        requests_user.update_user_fio(name, surname, patronymik, user_id)
        await state.clear()

        data = requests_user.get_user_info(user_id)
        print(data)
        city = data[0][4]
        phone_numder = data[0][5]

        new_data = (f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n'
                    f'–ò–º—è: {name}\n'
                    f'–§–∞–º–∏–ª–∏—è: {surname}\n'
                    f'–û—Ç—á–µ—Å—Ç–≤–æ: {patronymik}\n'
                    f'–ì–æ—Ä–æ–¥: {city}\n'
                    f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_numder}')

        await message.edit_text(text=new_data,reply_markup=user_keyboards.kabinet_buttons(user_id))
        await bot.delete_message(message.from_user.id,message.message_id-1)
        await message.answer('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')

    except Exception as e:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö,–≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(FSMFillForm.change_fio)

@dp.message(StateFilter(FSMFillForm.change_city))
async def get_new_city(message: types.Message,state:FSMContext):
    logging.info('get_new_city')
    user_id = message.from_user.id
    new_city_old = str(message.text)
    new_city_new = new_city_old

    requests_user.update_user_city(new_city_new,user_id)

    await state.clear()

    message_id_in_list = (requests_user.select_info_from_user_data(user_id))
    message_id = int(message_id_in_list[0][0])

    data = requests_user.get_user_info(user_id)
    name = data[0][1]
    lastname = data[0][2]
    patronymik = data[0][3]
    phone_numder = data[0][5]

    new_data = (f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n'
                f'–ò–º—è: {name}\n'
                f'–§–∞–º–∏–ª–∏—è: {lastname}\n'
                f'–û—Ç—á–µ—Å—Ç–≤–æ: {patronymik}\n'
                f'–ì–æ—Ä–æ–¥: {new_city_new}\n'
                f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_numder}')

    await message.edit_text(text=new_data,reply_markup=user_keyboards.kabinet_buttons(user_id))

    await bot.delete_message(message.from_user.id, message.message_id - 1)
    await message.answer('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')


@dp.message(StateFilter(FSMFillForm.change_phone_number))
async def get_new_phone_number(message: types.Message,state:FSMContext):
    logging.info('get_new_phone_number')
    user_id = message.from_user.id
    new_phone_number = str(message.text)

    if (len(new_phone_number) == 11) and (new_phone_number[0:2] == '89' or (new_phone_number[0:2] == '79')):
        requests_user.update_phone_number(new_phone_number,user_id)

        await state.clear()

        message_id_in_list = (requests_user.select_info_from_user_data(user_id))
        message_id = int(message_id_in_list[0][0])

        data = requests_user.get_user_info(user_id)
        name = data[0][1]
        lastname = data[0][2]
        patronymik = data[0][3]
        city = data[0][4]

        new_data = (f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n'
                    f'–ò–º—è: {name}\n'
                    f'–§–∞–º–∏–ª–∏—è: {lastname}\n'
                    f'–û—Ç—á–µ—Å—Ç–≤–æ: {patronymik}\n'
                    f'–ì–æ—Ä–æ–¥: {city}\n'
                    f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {new_phone_number}')

        await message.edit_text(text=new_data,reply_markup=user_keyboards.kabinet_buttons(user_id))

        await bot.delete_message(message.from_user.id, message.message_id - 1)
        await message.answer('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')


    else:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑')
        await state.set_state(FSMFillForm.change_phone_number)

if __name__ == "__main__":
    dp.run_polling(bot)